# =============================================================================
# 10. EJERCICIO INTEGRADOR: SISTEMA DE BIBLIOTECA
# =============================================================================

print("\n=== 10. EJERCICIO INTEGRADOR: SISTEMA DE BIBLIOTECA ===")

# Base de datos de libros (lista de diccionarios)
biblioteca = [
    {"id": 1, "titulo": "Cien a√±os de soledad", "autor": "Garc√≠a M√°rquez", 
     "genero": "Realismo m√°gico", "a√±o": 1967, "disponible": True},
    {"id": 2, "titulo": "1984", "autor": "George Orwell", 
     "genero": "Distop√≠a", "a√±o": 1949, "disponible": True},
    {"id": 3, "titulo": "El Quijote", "autor": "Cervantes", 
     "genero": "Cl√°sico", "a√±o": 1605, "disponible": False},
    {"id": 4, "titulo": "Harry Potter", "autor": "J.K. Rowling", 
     "genero": "Fantas√≠a", "a√±o": 1997, "disponible": True},
    {"id": 5, "titulo": "Orgullo y prejuicio", "autor": "Jane Austen", 
     "genero": "Romance", "a√±o": 1813, "disponible": True}
]

def mostrar_biblioteca(libros):
    """Muestra todos los libros de la biblioteca"""
    print("\nüìö CAT√ÅLOGO DE LA BIBLIOTECA")
    print("-" * 50)
    for libro in libros:
        estado = "‚úÖ Disponible" if libro["disponible"] else "‚ùå Prestado"
        print(f"ID: {libro['id']:2d} | {libro['titulo']:<20} | "
              f"{libro['autor']:<15} | {libro['a√±o']} | {estado}")

def buscar_por_genero(libros, genero_buscado):
    """Busca libros por g√©nero usando filter y lambda"""
    return list(filter(lambda libro: genero_buscado.lower() in libro["genero"].lower(), 
                      libros))

def buscar_por_a√±o(libros, a√±o_inicio, a√±o_fin):
    """Busca libros en un rango de a√±os"""
    return list(filter(lambda libro: a√±o_inicio <= libro["a√±o"] <= a√±o_fin, 
                      libros))

def libros_disponibles(libros):
    """Retorna solo los libros disponibles"""
    return list(filter(lambda libro: libro["disponible"], libros))

def ordenar_libros(libros, criterio="titulo"):
    """Ordena libros por diferentes criterios"""
    criterios = {
        "titulo": lambda x: x["titulo"],
        "autor": lambda x: x["autor"],
        "a√±o": lambda x: x["a√±o"],
        "id": lambda x: x["id"]
    }
    
    if criterio in criterios:
        return sorted(libros, key=criterios[criterio])
    else:
        return libros

def estadisticas_biblioteca(libros):
    """Calcula estad√≠sticas de la biblioteca"""
    total_libros = len(libros)
    disponibles = sum(1 for libro in libros if libro["disponible"])
    prestados = total_libros - disponibles
    
    # Obtener g√©neros √∫nicos
    generos = set(libro["genero"] for libro in libros)
    
    # Libro m√°s antiguo y m√°s reciente
    mas_antiguo = min(libros, key=lambda x: x["a√±o"])
    mas_reciente = max(libros, key=lambda x: x["a√±o"])
    
    # Promedio de a√±o de publicaci√≥n
    promedio_a√±o = sum(libro["a√±o"] for libro in libros) / total_libros
    
    return {
        "total": total_libros,
        "disponibles": disponibles,
        "prestados": prestados,
        "generos": generos,
        "mas_antiguo": mas_antiguo,
        "mas_reciente": mas_reciente,
        "promedio_a√±o": promedio_a√±o
    }

# Demostraci√≥n del sistema
mostrar_biblioteca(biblioteca)

# B√∫squedas
print(f"\nüîç B√öSQUEDAS")
fantasticos = buscar_por_genero(biblioteca, "fantas√≠a")
print(f"Libros de fantas√≠a: {[libro['titulo'] for libro in fantasticos]}")

clasicos = buscar_por_a√±o(biblioteca, 1800, 1900)
print(f"Libros del siglo XIX: {[libro['titulo'] for libro in clasicos]}")

disponibles = libros_disponibles(biblioteca)
print(f"Libros disponibles: {len(disponibles)} de {len(biblioteca)}")

# Ordenamiento
print(f"\nüìã ORDENAMIENTO")
por_a√±o = ordenar_libros(biblioteca, "a√±o")
print("Libros ordenados por a√±o:")
for libro in por_a√±o:
    print(f"  {libro['a√±o']}: {libro['titulo']}")

# Estad√≠sticas
print(f"\nüìä ESTAD√çSTICAS")
stats = estadisticas_biblioteca(biblioteca)
print(f"Total de libros: {stats['total']}")
print(f"Disponibles: {stats['disponibles']}")
print(f"Prestados: {stats['prestados']}")
print(f"G√©neros disponibles: {', '.join(stats['generos'])}")
print(f"Libro m√°s antiguo: {stats['mas_antiguo']['titulo']} ({stats['mas_antiguo']['a√±o']})")
print(f"Libro m√°s reciente: {stats['mas_reciente']['titulo']} ({stats['mas_reciente']['a√±o']})")
print(f"Promedio a√±o publicaci√≥n: {stats['promedio_a√±o']:.0f}")

# Usando comprensiones para an√°lisis adicional
print(f"\nüéØ AN√ÅLISIS CON COMPRENSIONES")

# T√≠tulos de libros disponibles en may√∫sculas
titulos_disponibles = [libro["titulo"].upper() for libro in biblioteca if libro["disponible"]]
print(f"T√≠tulos disponibles: {titulos_disponibles}")

# Diccionario de g√©neros y cantidad
contador_generos = {}
for libro in biblioteca:
    genero = libro["genero"]
    contador_generos[genero] = contador_generos.get(genero, 0) + 1
print(f"Libros por g√©nero: {contador_generos}")

# Autores √∫nicos
autores_unicos = set(libro["autor"] for libro in biblioteca)
print(f"Autores √∫nicos: {autores_unicos}")

print("\n" + "="*80)